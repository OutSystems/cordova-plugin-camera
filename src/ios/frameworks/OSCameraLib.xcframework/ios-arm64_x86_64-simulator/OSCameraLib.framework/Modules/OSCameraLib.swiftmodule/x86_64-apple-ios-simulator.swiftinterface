// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name OSCameraLib
import AVFoundation
import CoreGraphics
import Foundation
import MobileCoreServices
import Photos
import PhotosUI
import Swift
import SwiftUI
import UIKit
import UniformTypeIdentifiers
import _Concurrency
@_hasMissingDesignatedInitializers public class OSCAMRVideoOptions : OSCameraLib.OSCAMRMediaOptions {
  public init(saveToPhotoAlbum: Swift.Bool)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OSCAMRMediaOptions {
  @objc deinit
}
public enum OSCAMRDirection : Swift.Int {
  case back
  case front
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct OSCAMRMediaType : Swift.OptionSet {
  public typealias RawValue = Swift.Int
  public var rawValue: OSCameraLib.OSCAMRMediaType.RawValue
  public init(rawValue: OSCameraLib.OSCAMRMediaType.RawValue)
  public static let picture: OSCameraLib.OSCAMRMediaType
  public static let video: OSCameraLib.OSCAMRMediaType
  public static let both: OSCameraLib.OSCAMRMediaType
  public typealias ArrayLiteralElement = OSCameraLib.OSCAMRMediaType
  public typealias Element = OSCameraLib.OSCAMRMediaType
}
extension OSCameraLib.OSCAMRMediaType {
  public init(from enumValue: Swift.Int) throws
}
public struct OSCAMRFactory {
  public static func createCameraWrapper(withDelegate delegate: OSCameraLib.OSCAMRCallbackDelegate, and viewController: UIKit.UIViewController) -> OSCameraLib.OSCAMRActionDelegate
}
public protocol OSCAMRCallbackDelegate : AnyObject {
  func callback(result: Swift.String?, error: OSCameraLib.OSCAMRError?)
}
@_hasMissingDesignatedInitializers public class OSCAMRPictureOptions : OSCameraLib.OSCAMRMediaOptions {
  public init(quality: Swift.Int, size: OSCameraLib.OSCAMRSize? = nil, correctOrientation: Swift.Bool, encodingType: OSCameraLib.OSCAMREncodingType, saveToPhotoAlbum: Swift.Bool, direction: OSCameraLib.OSCAMRDirection, allowEdit: Swift.Bool)
  @objc deinit
}
public enum OSCAMREncodingType : Swift.Int {
  case jpeg
  case png
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct OSCAMRSize {
  public init(width: Swift.Int, height: Swift.Int)
}
public enum OSCAMRError : Swift.Int, Foundation.CustomNSError, Foundation.LocalizedError {
  case cameraAccess
  case cameraAvailability
  case takePictureIssue
  case takePictureArguments
  case takePictureCancel
  case invalidImageData
  case editPictureIssue
  case editPictureCancel
  case photoLibraryAccess
  case imageNotFound
  case choosePictureIssue
  case choosePictureCancel
  case captureVideoIssue
  case captureVideoCancel
  case videoNotFound
  case chooseMultimediaIssue
  case chooseMultimediaCancel
  case invalidEncodeResultMedia
  case generalIssue
  public var errorDescription: Swift.String? {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol OSCAMRActionDelegate : AnyObject {
  func captureMedia(with options: OSCameraLib.OSCAMRMediaOptions)
  func editPicture(_ image: UIKit.UIImage)
  func chooseFromGallery(mediaType: OSCameraLib.OSCAMRMediaType, allowEdit: Swift.Bool, allowMultipleSelection: Swift.Bool, andThumbnailAsData thumbnailAsData: Swift.Bool)
  func cleanTemporaryFiles()
}
extension OSCameraLib.OSCAMRActionDelegate {
  public func choosePicture(_ allowEdit: Swift.Bool)
  public func chooseMultimedia(_ mediaType: OSCameraLib.OSCAMRMediaType, and allowMultipleSelection: Swift.Bool)
}
extension OSCameraLib.OSCAMRDirection : Swift.Equatable {}
extension OSCameraLib.OSCAMRDirection : Swift.Hashable {}
extension OSCameraLib.OSCAMRDirection : Swift.RawRepresentable {}
extension OSCameraLib.OSCAMREncodingType : Swift.Equatable {}
extension OSCameraLib.OSCAMREncodingType : Swift.Hashable {}
extension OSCameraLib.OSCAMREncodingType : Swift.RawRepresentable {}
extension OSCameraLib.OSCAMRError : Swift.Equatable {}
extension OSCameraLib.OSCAMRError : Swift.Hashable {}
extension OSCameraLib.OSCAMRError : Swift.RawRepresentable {}
